#!/bin/bash
echo "Content-Type: application/json"
echo "Cache-Control: no-store"
echo "Access-Control-Allow-Origin: *"
echo "Access-Control-Allow-Headers: Content-Type, X-Requested-With, __RequestVerificationToken"
echo ""

url_decode() { local d="${1//+/ }"; printf '%b' "${d//%/\\x}"; }
kv_get() { local key="$1" qs="$QUERY_STRING" pair k v; [ -n "$qs" ] || return 1; for pair in ${qs//&/ }; do k="${pair%%=*}"; v="${pair#*=}"; [ "$k" = "$key" ] && { url_decode "$v"; return 0; }; done; return 1; }
curlq() { curl --connect-timeout 3 -m 10 -f -sS "$@"; }
json_escape() { printf '%s' "$1" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g' -e 's/\r/\\r/g' -e 's/\t/\\t/g' -e ':a;N;$!ba;s/\n/\\n/g'; }
j_str()  { printf '"%s":"%s"' "$1" "$(json_escape "$2")"; }
j_num()  { printf '"%s":%s'  "$1" "$2"; }
j_bool() { printf '"%s":%s'  "$1" "$2"; }
fail()   { printf '{'; j_bool ok false; printf ','; j_str error "${1:-unknown}"; printf ','; j_str host "$HOST"; printf '}\n'; exit 0; }
xget() { printf '%s' "$1" | tr -d '\n' | sed -n "s:.*<$2>\\([^<]*\\)</$2>.*:\\1:p"; }
fmt_time() { awk -v S="${1:-0}" 'BEGIN{h=int(S/3600); m=int((S%3600)/60); s=S%60; printf("%d:%02d:%02d", h, m, s);}'; }
fmt_bytes() { awk -v B="${1:-0}" 'BEGIN{u[0]="B";u[1]="kB";u[2]="MB";u[3]="GB";u[4]="TB";i=0; x=B+0; while (x>=1024 && i<4){ x=x/1024; i++ } printf("%.2f %s", x, u[i]);}'; }

ip="$(uci -q get hilink.auth.ip 2>/dev/null)"
[ -n "$ip" ] && UCI_HOST="http://$ip" || UCI_HOST=""
HOST="$(kv_get host 2>/dev/null || true)"
[ -z "$HOST" ] && HOST="$UCI_HOST"
[ -z "$HOST" ] && HOST="http://192.168.8.1"

TOK="$(curlq "$HOST/api/webserver/SesTokInfo" || true)"
[ -n "$TOK" ] || fail "failed_SesTokInfo"
SESSION="$(xget "$TOK" 'SesInfo')"
TOKEN="$(xget "$TOK" 'TokInfo')"
[ -n "$SESSION" ] || fail "session_null"
[ -n "$TOKEN"   ] || fail "token_null"

fetch_ep() { curlq -H "Cookie: $SESSION" -H "__RequestVerificationToken: $TOKEN" -H "X-Requested-With: XMLHttpRequest" "$HOST/$1"; }

XML_CURPLMN="$(fetch_ep 'api/net/current-plmn' || true)"
XML_STATUS="$(fetch_ep 'api/monitoring/status' || true)"
XML_SIGNAL="$(fetch_ep 'api/device/signal' || true)"
XML_SIGPARA="$(fetch_ep 'api/net/signal-para' || true)"
XML_ADDPRM="$(fetch_ep 'config/deviceinformation/add_param.xml' || true)"

[ -n "$XML_SIGNAL$XML_STATUS$XML_CURPLMN$XML_ADDPRM$XML_SIGPARA" ] || fail "API_Not_Responding"

CURRENT_NETWORK_NO_SERVICE=0
MODE_2G=0
MODE_3G=2
MODE_4G=7

cur_type_ex="$(xget "$XML_STATUS" 'CurrentNetworkTypeEx')"
[ -n "$cur_type_ex" ] || cur_type_ex="$(xget "$XML_STATUS" 'CurrentNetworkType')"

sg_mode="$(xget "$XML_SIGNAL" 'mode')"
sg_cellid_dec="$(xget "$XML_SIGNAL" 'cell_id')"
sg_rssi="$(xget "$XML_SIGNAL" 'rssi')"
sg_rsrp="$(xget "$XML_SIGNAL" 'rsrp')"
sg_rsrq="$(xget "$XML_SIGNAL" 'rsrq')"
sg_sinr="$(xget "$XML_SIGNAL" 'sinr')"
sg_rscp="$(xget "$XML_SIGNAL" 'rscp')"
sg_ecio="$(xget "$XML_SIGNAL" 'ecio')"
sg_pci="$(xget "$XML_SIGNAL" 'pci')"

np_Lac_hex="$(xget "$XML_SIGPARA" 'Lac')"
np_CellID_hex="$(xget "$XML_SIGPARA" 'CellID')"
np_Rssi="$(xget "$XML_SIGPARA" 'Rssi')"

plmn_num="$(xget "$XML_CURPLMN" 'Numeric')"
op_short="$(xget "$XML_CURPLMN" 'ShortName')"
op_full="$(xget "$XML_CURPLMN" 'FullName')"

ap_band="$(xget "$XML_ADDPRM" 'band')"
ap_earfcn1="$(xget "$XML_ADDPRM" 'earfcn1')"
ap_earfcn2="$(xget "$XML_ADDPRM" 'earfcn2')"
ap_bw1="$(xget "$XML_ADDPRM" 'bandwidth1')"
ap_bw2="$(xget "$XML_ADDPRM" 'bandwidth2')"
ap_lac_hex="$(xget "$XML_ADDPRM" 'lac')"
ap_cell_hex="$(xget "$XML_ADDPRM" 'cell_id')"
ap_rssi="$(xget "$XML_ADDPRM" 'rssi')"

band_mhz_by_lte() { case "$1" in 1) echo "2100";;3) echo "1800";;5) echo "850";;7) echo "2600";;8) echo "900";;20) echo "800";;28) echo "700";;38) echo "2600";;40) echo "2300";;41) echo "2500";;*) echo "";; esac; }

device_mode="$sg_mode"
[ -z "$device_mode" ] && device_mode="$cur_type_ex"
case "$device_mode" in ''|*[!0-9]*) case "$sg_mode" in *LTE*|*lte*) device_mode="$MODE_4G";;*WCDMA*|*UMTS*|*HSPA*|*3G*) device_mode="$MODE_3G";;*GSM*|*EDGE*|*2G*) device_mode="$MODE_2G";;*) device_mode="";; esac;; esac

pci_id="$sg_pci"; [ -n "$pci_id" ] || pci_id="-"
is_lte_hint=""; [ -n "$ap_earfcn1$ap_earfcn2" ] && is_lte_hint="1"; [ -n "$ap_band" ] && is_lte_hint="1"
cell_hex_raw="$ap_cell_hex"; [ -z "$cell_hex_raw" ] && cell_hex_raw="$np_CellID_hex"
lte_metric_hint=""; [ -n "$sg_rsrp$sg_rsrq$sg_sinr" ] && lte_metric_hint="1"; [ "$pci_id" != "-" ] && lte_metric_hint="1"
wcdma_metric_hint=""; [ -n "$sg_rscp$sg_ecio" ] && wcdma_metric_hint="1"

lac_hex="$ap_lac_hex"; [ -z "$lac_hex" ] && lac_hex="$np_Lac_hex"; [ -n "$lac_hex" ] && lac_hex="$(printf '%s' "$lac_hex" | tr '[:lower:]' '[:upper:]')"
lac_dec=""; [ -n "$lac_hex" ] && lac_dec=$(( 0x${lac_hex} ))

cell_dec=""; cell_hex=""
if [ -n "$sg_cellid_dec" ]; then cell_dec="$sg_cellid_dec"; cell_hex="$(printf '%X' "$sg_cellid_dec")"; else cell_hex="$ap_cell_hex"; [ -z "$cell_hex" ] && cell_hex="$np_CellID_hex"; [ -n "$cell_hex" ] && cell_dec=$(( 0x${cell_hex} )); fi

if [ -z "$device_mode" ] || ! echo "$device_mode" | grep -q '^[0-9]\+$' || [ "$device_mode" = "$CURRENT_NETWORK_NO_SERVICE" ]; then
  if [ -n "$is_lte_hint$lte_metric_hint" ]; then device_mode="$MODE_4G"
  elif [ -n "$wcdma_metric_hint" ]; then device_mode="$MODE_3G"
  elif [ -n "$cell_dec" ] && [ "$cell_dec" -lt 65536 ]; then device_mode="$MODE_2G"
  else device_mode=""; fi
fi

bw_dl=""; bw_ul=""; [ -n "$ap_bw1" ] && bw_dl=$(( ${ap_bw1} / 1000 )); [ -n "$ap_bw2" ] && bw_ul=$(( ${ap_bw2} / 1000 ))
band_txt=""; if [ -n "$ap_band" ]; then _mhz="$(band_mhz_by_lte "$ap_band")"; if [ -n "$_mhz" ]; then band_txt="B${ap_band} (${_mhz}MHz)"; else band_txt="B${ap_band}"; fi; fi

mode_name=""; case "$device_mode" in "$MODE_4G") mode_name="4G (LTE)";; "$MODE_3G") mode_name="3G (HSPA)";; "$MODE_2G") mode_name="2G (EDGE)";; ""|"$CURRENT_NETWORK_NO_SERVICE") mode_name="";; *) mode_name="";; esac

operator=""; [ -n "$op_short" ] && operator="$op_short"; [ -z "$operator" ] && [ -n "$op_full" ] && operator="$op_full"
plmn="$plmn_num"

rssi_val="$sg_rssi"; [ -z "$rssi_val" ] && rssi_val="$ap_rssi"; [ -z "$rssi_val" ] && rssi_val="$np_Rssi"
[ -n "$rssi_val" ] && { rssi_val="${rssi_val//&gt;/>}"; rssi_val="${rssi_val//&lt;/<}"; case "$rssi_val" in *dBm) :;; *) rssi_val="${rssi_val}dBm";; esac; }

if [ -n "$cell_hex" ]; then cell_hex="$(printf '%s' "$cell_hex" | tr '[:lower:]' '[:upper:]')"; if [ "$device_mode" = "$MODE_2G" ]; then while [ ${#cell_hex} -lt 4 ]; do cell_hex="0$cell_hex"; done; cell_hex="${cell_hex#${cell_hex%????}}"; else while [ ${#cell_hex} -lt 7 ]; do cell_hex="0$cell_hex"; done; cell_hex="${cell_hex#${cell_hex%???????}}"; fi; fi

enb_rnc=""; ci=""; if [ -n "$cell_dec" ]; then if [ "$device_mode" = "$MODE_4G" ]; then enb_rnc=$(( cell_dec >> 8 )); ci=$(( cell_dec % 256 )); elif [ "$device_mode" = "$MODE_3G" ]; then enb_rnc=$(( cell_dec >> 16 )); ci=$(( cell_dec % 65536 )); fi; fi

IF_NET="$(uci -q get hilink.auth.network 2>/dev/null | sed 's/^@//')"; [ -z "$IF_NET" ] && IF_NET="wan"
IF_JSON="$(ubus -S call "network.interface.${IF_NET}" status 2>/dev/null)"
UPTIME=0; L3DEV=""; RX_BYTES=0; TX_BYTES=0; RX_PKTS=0; TX_PKTS=0
if [ -n "$IF_JSON" ]; then UPTIME="$(jsonfilter -s "$IF_JSON" -e '@.uptime' 2>/dev/null)"; L3DEV="$(jsonfilter -s "$IF_JSON" -e '@.l3_device' 2>/dev/null)"; fi
if [ -n "$L3DEV" ]; then DEV_JSON="$(ubus -S call network.device status "{\"name\":\"$L3DEV\"}" 2>/dev/null)"; if [ -n "$DEV_JSON" ]; then RX_BYTES="$(jsonfilter -s "$DEV_JSON" -e '@.statistics.rx_bytes' 2>/dev/null)"; TX_BYTES="$(jsonfilter -s "$DEV_JSON" -e '@.statistics.tx_bytes' 2>/dev/null)"; RX_PKTS="$(jsonfilter -s "$DEV_JSON" -e '@.statistics.rx_packets' 2>/dev/null)"; TX_PKTS="$(jsonfilter -s "$DEV_JSON" -e '@.statistics.tx_packets' 2>/dev/null)"; fi; fi
if [ -z "$RX_BYTES" ] || [ -z "$TX_BYTES" ]; then if [ -n "$L3DEV" ] && grep -q "$L3DEV" /proc/net/dev 2>/dev/null; then set -- $(awk -v IF="$L3DEV" -F'[: ]+' '$1==IF { rxb=$3; rxp=$4; txb=$11; txp=$12; print rxb, rxp, txb, txp }' /proc/net/dev 2>/dev/null); [ -n "$1" ] && RX_BYTES="$1"; [ -n "$2" ] && RX_PKTS="$2"; [ -n "$3" ] && TX_BYTES="$3"; [ -n "$4" ] && TX_PKTS="$4"; fi; fi

CONN_TIME="$(fmt_time "${UPTIME:-0}")"
CONN_RX_HR="$(fmt_bytes "${RX_BYTES:-0}")"
CONN_TX_HR="$(fmt_bytes "${TX_BYTES:-0}")"
CONN_RX_TXT="${CONN_RX_HR}"
CONN_TX_TXT="${CONN_TX_HR}"

printf '{'
  j_bool ok true; printf ','
  printf '"host":"%s",' "$(json_escape "$HOST")"
  printf '"data":{'
    printf '"plmn":';     [ -n "$plmn" ]     && printf '"%s",' "$(json_escape "$plmn")"       || printf 'null,'
    printf '"operator":'; [ -n "$operator" ] && printf '"%s",' "$(json_escape "$operator")"   || printf 'null,'
    printf '"device_mode":'; [ -n "$device_mode" ] && printf '%s,' "$device_mode" || printf 'null,'
    printf '"network_mode":"%s",' "$(json_escape "$mode_name")"
    printf '"pci":';     [ -n "$pci_id" ]     && printf '"%s",' "$(json_escape "$pci_id")" || printf 'null,'
    printf '"rssi":'; [ -n "$rssi_val" ] && printf '"%s",' "$(json_escape "$rssi_val")" || printf 'null,'
    printf '"rsrp":'; [ -n "$sg_rsrp" ]  && printf '"%s",' "$(json_escape "$sg_rsrp")"   || printf 'null,'
    printf '"sinr":'; [ -n "$sg_sinr" ]  && printf '"%s",' "$(json_escape "$sg_sinr")"   || printf 'null,'
    printf '"rsrq":'; [ -n "$sg_rsrq" ]  && printf '"%s",' "$(json_escape "$sg_rsrq")"   || printf 'null,'
    printf '"rscp":'; [ -n "$sg_rscp" ]  && printf '"%s",' "$(json_escape "$sg_rscp")"   || printf 'null,'
    printf '"ecio":'; [ -n "$sg_ecio" ]  && printf '"%s",' "$(json_escape "$sg_ecio")"   || printf 'null,'
    printf '"lac_dec":'; [ -n "$lac_dec" ] && printf '%s,' "$lac_dec" || printf 'null,'
    printf '"lac_hex":'; [ -n "$lac_hex" ] && printf '"%s",' "$(json_escape "$lac_hex")" || printf 'null,'
    printf '"cell_id_dec":'; [ -n "$cell_dec" ] && printf '%s,' "$cell_dec" || printf 'null,'
    printf '"cell_id_hex":'; [ -n "$cell_hex" ] && printf '"%s",' "$(json_escape "$cell_hex")" || printf 'null,'
    printf '"enb_rnc":';   [ -n "$enb_rnc" ] && printf '%s,' "$enb_rnc" || printf 'null,'
    printf '"cell_index":';[ -n "$ci" ]      && printf '%s,' "$ci"      || printf 'null,'
    printf '"earfcn_dl":'; [ -n "$ap_earfcn1" ] && printf '"%s",' "$(json_escape "$ap_earfcn1")" || printf 'null,'
    printf '"earfcn_ul":'; [ -n "$ap_earfcn2" ] && printf '"%s",' "$(json_escape "$ap_earfcn2")" || printf 'null,'
    printf '"bandwidth_dl_mhz":'; [ -n "$bw_dl" ] && printf '%s,' "$bw_dl" || printf 'null,'
    printf '"bandwidth_ul_mhz":'; [ -n "$bw_ul" ] && printf '%s,' "$bw_ul" || printf 'null,'
    printf '"band":'; if [ -n "$band_txt" ]; then printf '"%s",' "$(json_escape "$band_txt")"; else printf 'null,'; fi
    printf '"connt":"%s",'  "$(json_escape "$CONN_TIME")"
    printf '"connrx":"%s",' "$(json_escape "$CONN_RX_TXT")"
    printf '"conntx":"%s"' "$(json_escape "$CONN_TX_TXT")"
  printf '}'
printf '}\n'
