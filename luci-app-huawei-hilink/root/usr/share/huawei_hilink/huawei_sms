#!/bin/bash
# Powered By Mutiara-Wrt
set +o nounset
DEBUG="${DEBUG:-0}"
DBGLOG="/tmp/mutiara_sms_debug.log"
: > "$DBGLOG" 2>/dev/null || true
dlog(){ [ "$DEBUG" = "1" ] && printf '%s\n' "[$(date +'%F %T')] $*" >>"$DBGLOG"; }

printf '%s\n' 'Content-Type: application/json' 'Cache-Control: no-store' \
  'Access-Control-Allow-Origin: *' 'Access-Control-Allow-Headers: Content-Type, X-Requested-With, __RequestVerificationToken'
printf '\n'

url_decode(){ local d="${1//+/ }"; printf '%b' "${d//%/\\x}"; }
kv_get(){ local key="$1" qs="$QUERY_STRING" pair k v; [ -n "$qs" ] || return 1
  for pair in ${qs//&/ }; do
    k="${pair%%=*}"; v="${pair#*=}"
    [ "$k" = "$key" ] && { url_decode "$v"; return 0; }
  done; return 1
}
curlq(){ curl --connect-timeout 3 -m 10 -f -sS "$@" 2>>"$DBGLOG"; }
json_escape(){ printf '%s' "$1" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g' \
  -e 's/\r/\\r/g' -e 's/\t/\\t/g' -e ':a;N;$!ba;s/\n/\\n/g'; }
xget(){ printf '%s' "$1" | tr -d '\n' | sed -n "s:.*<$2>\\([^<]*\\)</$2>.*:\\1:p"; }
fail(){ printf '{"ok":false,"error":"%s"}\n' "${1:-unknown}"; dlog "fail:$1"; exit 0; }

COOKIEJAR="/tmp/mutiara_cookiejar"
USER="$(uci -q get hilink.auth.user 2>/dev/null || true)"
RAW_PASS="$(uci -q get hilink.auth.pass 2>/dev/null || true)"

hex_from_stdin(){ if command -v xxd >/dev/null 2>&1; then xxd -p -c256;
  elif command -v hexdump >/dev/null 2>&1; then hexdump -v -e '1/1 "%02x"';
  else od -An -v -t x1 | tr -d ' \n'; fi; }
b64_from_stdin(){ if command -v openssl >/dev/null 2>&1; then openssl enc -base64 -A;
  else base64; fi; }

encode_password_type4(){
  local raw="$1" raw_sha_hex base64_raw_sha concat final_sha_hex enc
  raw_sha_hex="$(printf "%s" "$raw" | openssl dgst -sha256 -binary | hex_from_stdin)" || return 1
  base64_raw_sha="$(printf "%s" "$raw_sha_hex" | b64_from_stdin)" || return 1
  concat="${USER}${base64_raw_sha}${TOKEN}"
  final_sha_hex="$(printf "%s" "$concat" | openssl dgst -sha256 -binary | hex_from_stdin)" || return 1
  enc="$(printf "%s" "$final_sha_hex" | b64_from_stdin)" || return 1
  printf '%s' "$enc"
}

HOST="$(kv_get host 2>/dev/null || true)"
[ -z "$HOST" ] && HOST="$(uci -q get hilink.auth.ip 2>/dev/null | sed 's#^#http://#')" 
[ -z "$HOST" ] && HOST="http://192.168.8.1"

ensure_logged_in(){
  local TOK LOGIN_RESP
  if [ -f "$COOKIEJAR" ]; then
    TOK="$(curlq -b "$COOKIEJAR" -c "$COOKIEJAR" "$HOST/api/webserver/SesTokInfo" || true)"
    SESSION="$(xget "$TOK" 'SesInfo')"
    TOKEN="$(xget "$TOK" 'TokInfo')"
    if [ -n "$SESSION" ] && [ -n "$TOKEN" ]; then
      STATE="$(curlq -b "$COOKIEJAR" -H "Cookie: $SESSION" -H "__RequestVerificationToken: $TOKEN" \
              "$HOST/api/user/state-login" || true)"
      [ "$(xget "$STATE" 'State')" = "0" ] && return 0
    fi
  fi
  TOK="$(curlq "$HOST/api/webserver/SesTokInfo" || true)"
  SESSION="$(xget "$TOK" 'SesInfo')"
  TOKEN="$(xget "$TOK" 'TokInfo')"
  [ -n "$SESSION" ] || fail "session_null"
  [ -n "$TOKEN"   ] || fail "token_null"
  ENC_PASSWORD="$(encode_password_type4 "$RAW_PASS")" || fail "encode_fail"
  BODY="<?xml version=\"1.0\" encoding=\"UTF-8\"?><request><Username>${USER}</Username><Password>${ENC_PASSWORD}</Password><password_type>4</password_type></request>"
  LOGIN_RESP="$(curlq -b "$COOKIEJAR" -c "$COOKIEJAR" -H "Cookie: $SESSION" \
              -H "__RequestVerificationToken: $TOKEN" -H "Content-Type: application/xml" \
              -d "$BODY" "$HOST/api/user/login" || true)"
  echo "$LOGIN_RESP" | grep -qi "<response>OK</response>" || fail "login_failed"
  TOK="$(curlq -b "$COOKIEJAR" -c "$COOKIEJAR" "$HOST/api/webserver/SesTokInfo" || true)"
  SESSION="$(xget "$TOK" 'SesInfo')"
  TOKEN="$(xget "$TOK" 'TokInfo')"
}

ensure_logged_in

SMS_PAYLOAD='<?xml version="1.0" encoding="UTF-8"?><request><PageIndex>1</PageIndex><ReadCount>20</ReadCount><BoxType>1</BoxType><SortType>0</SortType><Ascending>0</Ascending><UnreadPreferred>0</UnreadPreferred></request>'
XML_SMS="$(curlq -b "$COOKIEJAR" -H "Cookie: $SESSION" -H "__RequestVerificationToken: $TOKEN" \
         -H "X-Requested-With: XMLHttpRequest" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" \
         -X POST --data-binary "$SMS_PAYLOAD" "$HOST/api/sms/sms-list" || true)"

SMS_COUNT="$(xget "$XML_SMS" 'Count')"
[ -z "$SMS_COUNT" ] && SMS_COUNT=0

ONE_LINE="$(printf '%s' "$XML_SMS" | tr -d '\n')"
MSG_INNER="$(printf '%s' "$ONE_LINE" | sed -n 's:.*<Messages>\(.*\)</Messages>.*:\1:p')"
MSG_LINES="$(printf '%s' "$MSG_INNER" | sed 's#</Message>[[:space:]]*<Message>#</Message>\n<Message>#g')"

SMS_MSGS_JSON=""
while IFS= read -r msgblock; do
  printf '%s' "$msgblock" | grep -q '<Message>' || continue
  printf '%s' "$msgblock" | grep -q '</Message>' || continue
  SMSTAT="$(xget "$msgblock" 'Smstat')"
  INDEX="$(xget "$msgblock" 'Index')"
  PHONE="$(xget "$msgblock" 'Phone')"
  CONTENT="$(xget "$msgblock" 'Content')"
  DATE_SMS="$(xget "$msgblock" 'Date')"
  SAVETYPE="$(xget "$msgblock" 'SaveType')"
  PRIORITY="$(xget "$msgblock" 'Priority')"
  SMSTYPE="$(xget "$msgblock" 'SmsType')"
  [ -z "${INDEX}${CONTENT}${DATE_SMS}" ] && continue
  MSG_JSON="$(printf '{"Smstat":%s,"Index":%s,"Phone":"%s","Content":"%s","Date":"%s","SaveType":%s,"Priority":%s,"SmsType":%s}' \
    "${SMSTAT:-0}" "${INDEX:-0}" "$(json_escape "$PHONE")" "$(json_escape "$CONTENT")" "$(json_escape "$DATE_SMS")" \
    "${SAVETYPE:-0}" "${PRIORITY:-0}" "${SMSTYPE:-0}")"
  [ -z "$SMS_MSGS_JSON" ] && SMS_MSGS_JSON="$MSG_JSON" || SMS_MSGS_JSON="${SMS_MSGS_JSON},$MSG_JSON"
done <<EOF
$MSG_LINES
EOF

printf '{"status":"success","host":"%s","sms":{"count":%s,"messages":[%s]}}\n' \
  "$(json_escape "$HOST")" "$SMS_COUNT" "$SMS_MSGS_JSON"
